"# Scans node_modules top-level directories and .vercel/output/functions (if present)"
# Determine repository root as the parent of the scripts directory so the script can be
# executed from anywhere and still find the project's node_modules folder.
$scriptDir = $PSScriptRoot
$repoRoot = Split-Path -Parent $scriptDir
Push-Location $repoRoot

if (-not (Test-Path "node_modules")) {
  Write-Output "node_modules not found at $repoRoot\node_modules"
  Pop-Location
  exit 0
}

Write-Output "Scanning top-level node_modules in $repoRoot (this may take a few seconds)..."
Get-ChildItem "$repoRoot\node_modules" -Directory | ForEach-Object {
  $sum = 0
  try { $sum = (Get-ChildItem $_.FullName -Recurse -File -ErrorAction Stop | Measure-Object Length -Sum).Sum } catch { $sum = 0 }
  [PSCustomObject]@{ Name = $_.Name; SizeMB = [math]::Round(($sum/1MB),2) }
} | Sort-Object SizeMB -Descending | Select-Object -First 40 | Format-Table -AutoSize

if (Test-Path "$repoRoot\.vercel\output\functions"){
  Write-Output "`nScanning $repoRoot\.vercel/output/functions..."
  Get-ChildItem "$repoRoot\.vercel\output\functions" -Recurse -Directory | ForEach-Object {
    $sum = 0
    try { $sum = (Get-ChildItem $_.FullName -Recurse -File -ErrorAction Stop | Measure-Object Length -Sum).Sum } catch { $sum = 0 }
    [PSCustomObject]@{ FunctionPath = $_.FullName; SizeMB = [math]::Round(($sum/1MB),2) }
  } | Sort-Object SizeMB -Descending | Format-Table -AutoSize
} else {
  Write-Output "`n$repoRoot\.vercel/output/functions not found"
}
Pop-Location
