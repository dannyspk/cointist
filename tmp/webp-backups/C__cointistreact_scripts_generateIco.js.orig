// Generates a single-entry ICO (PNG-based) from public/favicon.png
// Writes public/favicon.ico
const fs = require('fs');
const path = require('path');
const sharp = require('sharp');

async function main(){
  const src = path.join(__dirname, '..', 'public', 'favicon.png');
  const out = path.join(__dirname, '..', 'public', 'favicon.ico');
  if (!fs.existsSync(src)) {
    console.error('Source PNG not found:', src);
    process.exit(2);
  }
  try{
    // Create a 32x32 PNG buffer
    const png = await sharp(src).resize(32,32, { fit: 'contain' }).png().toBuffer();
    // ICO header: 6 bytes
    const header = Buffer.alloc(6);
    header.writeUInt16LE(0, 0); // reserved
    header.writeUInt16LE(1, 2); // type 1 = icon
    header.writeUInt16LE(1, 4); // count
    // Directory entry: 16 bytes
    const entry = Buffer.alloc(16);
    entry.writeUInt8(32, 0); // width
    entry.writeUInt8(32, 1); // height
    entry.writeUInt8(0, 2); // color count
    entry.writeUInt8(0, 3); // reserved
    entry.writeUInt16LE(1, 4); // planes
    entry.writeUInt16LE(32, 6); // bitCount
    entry.writeUInt32LE(png.length, 8); // bytes in resource
    const offset = 6 + 16; // header + dir
    entry.writeUInt32LE(offset, 12); // image offset
    const ico = Buffer.concat([header, entry, png]);
    fs.writeFileSync(out, ico);
    console.log('Wrote ICO to', out, 'size', ico.length);
  }catch(e){
    console.error('Failed to generate ICO:', e);
    process.exit(1);
  }
}

main();
